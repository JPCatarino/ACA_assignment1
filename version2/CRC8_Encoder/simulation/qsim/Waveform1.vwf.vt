// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/08/2020 16:30:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CRC8_Encoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CRC8_Encoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] dIn;
// wires                                               
wire [23:0] dOut;

// assign statements (if any)                          
CRC8_Encoder i1 (
// port map - connection between master ports and signals/registers   
	.dIn(dIn),
	.dOut(dOut)
);
initial 
begin 
#1000000 $finish;
end 
// dIn[ 15 ]
initial
begin
	dIn[15] = 1'b1;
end 
// dIn[ 14 ]
initial
begin
	dIn[14] = 1'b0;
end 
// dIn[ 13 ]
initial
begin
	dIn[13] = 1'b1;
end 
// dIn[ 12 ]
initial
begin
	dIn[12] = 1'b0;
end 
// dIn[ 11 ]
initial
begin
	dIn[11] = 1'b1;
end 
// dIn[ 10 ]
initial
begin
	dIn[10] = 1'b0;
end 
// dIn[ 9 ]
initial
begin
	dIn[9] = 1'b1;
end 
// dIn[ 8 ]
initial
begin
	dIn[8] = 1'b0;
end 
// dIn[ 7 ]
initial
begin
	dIn[7] = 1'b0;
	dIn[7] = #470000 1'b1;
end 
// dIn[ 6 ]
initial
begin
	dIn[6] = 1'b1;
	dIn[6] = #470000 1'b0;
end 
// dIn[ 5 ]
initial
begin
	dIn[5] = 1'b0;
	dIn[5] = #470000 1'b1;
end 
// dIn[ 4 ]
initial
begin
	dIn[4] = 1'b1;
	dIn[4] = #470000 1'b0;
end 
// dIn[ 3 ]
initial
begin
	dIn[3] = 1'b0;
	dIn[3] = #470000 1'b1;
end 
// dIn[ 2 ]
initial
begin
	dIn[2] = 1'b1;
	dIn[2] = #470000 1'b0;
end 
// dIn[ 1 ]
initial
begin
	dIn[1] = 1'b0;
	dIn[1] = #470000 1'b1;
end 
// dIn[ 0 ]
initial
begin
	dIn[0] = 1'b1;
	dIn[0] = #470000 1'b0;
end 
endmodule

